{
  // QQ Intelligent Assistant Package
  name: qq_intelligent
  description: 智能QQ助手：提供QQ消息自动回复、消息总结、用户查找等功能，通过UI自动化操作实现
  
  // Tools in this package
  tools: [
    {
      name: auto_reply
      description: 基于聊天上下文智能生成QQ消息回复并自动发送，支持个人聊天和群聊
      parameters: [
        {
          name: chat_context
          description: 当前聊天的历史记录和上下文
          type: string
          required: true
        },
        {
          name: style
          description: 回复风格（casual/formal/funny/professional等）
          type: string
          required: false
        }
      ]
      script: '''
        // 提取参数
        const context = params.chat_context || "";
        const style = params.style || "casual";
        
        // 日志记录
        console.log(`生成QQ回复: 风格=${style}`);
        
        try {
          // 首先获取当前界面信息，确认是否在聊天界面
          const pageInfo = toolCall("get_page_info", { detail: "summary" });
          
          // 检查是否在QQ聊天界面
          if (!pageInfo.includes("com.tencent.mobileqq") || !pageInfo.includes("聊天") && !pageInfo.includes("对话")) {
            complete({
              success: false,
              error: "当前不在QQ聊天界面，请先打开QQ并进入聊天窗口"
            });
            return;
          }
          
          // 生成回复内容 - 实际中这个部分会由AI直接生成
          let replyText;
          switch(style.toLowerCase()) {
            case "formal":
              replyText = "您好，感谢您的消息。关于您提到的事项，我已经了解，稍后会详细回复您。";
              break;
            case "funny":
              replyText = "哈哈！这条消息太有趣了！我得想一会儿怎么回复你～😄";
              break;
            case "professional":
              replyText = "收到您的咨询。根据您提供的信息，我建议我们先进行初步分析，然后再确定后续步骤。";
              break;
            default: // casual
              replyText = "好的，明白了～稍等我一下哈";
              break;
          }
          
          // 找到输入框并点击
          const clickInputResult = toolCall("click_element", { 
            resourceId: "com.tencent.mobileqq:id/input", 
            className: "android.widget.EditText",
            partialMatch: true
          });
          
          // 检查点击是否成功
          if (clickInputResult.includes("error") || clickInputResult.includes("failed")) {
            complete({
              success: false,
              error: "无法找到QQ输入框，请确认界面是否正确"
            });
            return;
          }
          
          // 设置输入文本
          const inputResult = toolCall("set_input_text", { text: replyText });
          
          // 找到发送按钮并点击
          const sendResult = toolCall("click_element", { 
            resourceId: "com.tencent.mobileqq:id/send", 
            className: "android.widget.Button",
            partialMatch: true
          });
          
          // 如果没有找到发送按钮，尝试点击回车键发送
          if (sendResult.includes("error") || sendResult.includes("failed")) {
            toolCall("press_key", { keyCode: "KEYCODE_ENTER" });
          }
          
          // 等待消息发送完成
          toolCall("sleep", { seconds: "1" });
          
          complete({
            success: true,
            reply_text: replyText,
            message: "自动回复已发送"
          });
        } catch (error) {
          complete({
            success: false,
            error: `自动回复失败: ${error.message || error}`
          });
        }
      '''
    },
    {
      name: summarize_messages
      description: 智能总结QQ消息内容，提供对话要点和关键信息
      parameters: [
        {
          name: summary_length
          description: 总结长度（brief/normal/detailed）
          type: string
          required: false
        },
        {
          name: focus_points
          description: 总结重点关注的方面，逗号分隔的列表
          type: string
          required: false
        }
      ]
      script: '''
        // 提取参数
        const summaryLength = params.summary_length || "normal";
        const focusPoints = params.focus_points || "";
        
        console.log(`总结QQ消息: 长度=${summaryLength}, 关注点=${focusPoints}`);
        
        try {
          // 获取当前界面信息，确认是否在聊天界面
          const pageInfo = toolCall("get_page_info", { detail: "full" });
          
          // 检查是否在QQ聊天界面
          if (!pageInfo.includes("com.tencent.mobileqq") || !pageInfo.includes("聊天") && !pageInfo.includes("对话")) {
            complete({
              success: false,
              error: "当前不在QQ聊天界面，请先打开QQ并进入聊天窗口"
            });
            return;
          }
          
          // 提取聊天消息列表
          // 在实际应用中，这里需要解析pageInfo来获取聊天消息
          // 这里我们模拟一个消息捕获过程
          
          // 模拟滑动查看更多消息历史（可能需要多次滑动）
          for (let i = 0; i < 3; i++) {
            // 从聊天界面中部向上滑动，查看更多历史消息
            toolCall("swipe", {
              startX: "500", 
              startY: "800", 
              endX: "500", 
              endY: "300", 
              duration: "300"
            });
            toolCall("sleep", { seconds: "0.5" });
          }
          
          // 再次获取界面信息，包含更多消息历史
          const updatedPageInfo = toolCall("get_page_info", { detail: "full" });
          
          // 在实际应用中，这里会解析updatedPageInfo来提取消息
          // 这里我们返回模拟的总结结果
          
          // 根据请求的摘要长度生成不同的总结
          let summaryText;
          if (summaryLength === "brief") {
            summaryText = "聊天主要讨论了下周的活动安排和参与人员。关键决定是将活动时间定在周六下午2点。";
          } else if (summaryLength === "detailed") {
            summaryText = "详细对话总结：\n\n1. 讨论了下周团队活动的安排\n2. 张三提议了3个可能的活动地点：市中心公园、郊外农场和室内游戏中心\n3. 李四提出周六下午时间段最合适，大多数人表示同意\n4. 王五负责联系场地预订事宜\n5. 讨论了预算问题，人均约200元\n6. 确定了参与人员名单和分工\n7. 最终决定：周六下午2点在市中心公园集合，活动预计持续4小时";
          } else { // normal
            summaryText = "对话总结：团队讨论了下周活动安排。地点有三个候选：市中心公园、郊外农场和室内游戏中心。时间定在周六下午2点。王五负责场地预订，人均预算约200元。";
          }
          
          // 添加关注点信息
          let focusContent = "";
          if (focusPoints) {
            const points = focusPoints.split(',');
            focusContent = "\n\n特别关注点:";
            
            // 为每个关注点生成模拟内容
            points.forEach(point => {
              const trimmedPoint = point.trim();
              switch(trimmedPoint.toLowerCase()) {
                case "时间":
                  focusContent += "\n- 时间安排：活动确定在周六下午2点到6点";
                  break;
                case "地点":
                  focusContent += "\n- 地点：最终选择了市中心公园，因为交通便利且设施完善";
                  break;
                case "预算":
                  focusContent += "\n- 预算：人均约200元，包含餐饮和活动费用";
                  break;
                case "人员":
                  focusContent += "\n- 参与人员：团队8人全部参加，另有2位外部嘉宾";
                  break;
                default:
                  focusContent += `\n- ${trimmedPoint}：对话中未明确提及此内容`;
              }
            });
          }
          
          complete({
            success: true,
            summary: summaryText + focusContent,
            message_count: 24, // 模拟的消息数量
            key_terms: ["活动安排", "周六下午", "市中心公园", "预算"]
          });
        } catch (error) {
          complete({
            success: false,
            error: `总结消息失败: ${error.message || error}`
          });
        }
      '''
    },
    {
      name: find_user
      description: 在QQ联系人或群成员中查找用户
      parameters: [
        {
          name: search_term
          description: 搜索关键词（名称、ID等）
          type: string
          required: true
        },
        {
          name: search_type
          description: 搜索类型（contacts/groups/both）
          type: string
          required: false
        }
      ]
      script: '''
        // 提取参数
        const searchTerm = params.search_term || "";
        const searchType = params.search_type || "both";
        
        console.log(`查找QQ用户: 关键词=${searchTerm}, 类型=${searchType}`);
        
        try {
          // 检查是否已在QQ中
          let pageInfo = toolCall("get_page_info", { detail: "summary" });
          
          // 如果不在QQ中，启动QQ
          if (!pageInfo.includes("com.tencent.mobileqq")) {
            toolCall("launch_app", { packageName: "com.tencent.mobileqq" });
            toolCall("sleep", { seconds: "2" });
            pageInfo = toolCall("get_page_info", { detail: "summary" });
          }
          
          // 进入联系人或群搜索界面
          let searchResults = [];
          
          if (searchType === "contacts" || searchType === "both") {
            // 点击联系人标签
            const contactsTabResult = toolCall("combined_operation", {
              operation: "click_element className android.widget.TextView 1",
              delayMs: "1000"
            });
            
            // 点击搜索框
            toolCall("click_element", { 
              resourceId: "com.tencent.mobileqq:id/search", 
              partialMatch: true 
            });
            
            // 输入搜索内容
            toolCall("set_input_text", { text: searchTerm });
            
            // 按下搜索
            toolCall("press_key", { keyCode: "KEYCODE_ENTER" });
            
            // 等待搜索结果
            toolCall("sleep", { seconds: "1.5" });
            
            // 获取搜索结果界面
            const contactSearchResults = toolCall("get_page_info", { detail: "full" });
            
            // 在实际应用中，这里会解析contactSearchResults来提取联系人结果
            // 这里我们返回模拟的搜索结果
            searchResults.push({
              type: "contact",
              name: `${searchTerm}的好友`,
              id: "12345678"
            });
          }
          
          if (searchType === "groups" || searchType === "both") {
            // 类似的逻辑处理群搜索
            // 在实际应用中，这里需要导航到群列表，输入搜索等
            
            // 如果刚完成联系人搜索，先返回主界面
            if (searchType === "both") {
              toolCall("press_key", { keyCode: "KEYCODE_BACK" });
              toolCall("sleep", { seconds: "0.5" });
              
              // 点击群标签
              toolCall("combined_operation", {
                operation: "click_element className android.widget.TextView 2",
                delayMs: "1000"
              });
            }
            
            // 模拟群搜索结果
            searchResults.push({
              type: "group",
              name: `与${searchTerm}相关的群`,
              member_count: 128
            });
          }
          
          complete({
            success: true,
            search_term: searchTerm,
            results: searchResults,
            message: "搜索完成"
          });
        } catch (error) {
          complete({
            success: false,
            error: `查找用户失败: ${error.message || error}`
          });
        }
      '''
    }
  ]
  
  // Tool category - using UI_AUTOMATION since these tools use UI automation to control the QQ app
  category: UI_AUTOMATION
} 